AWSTemplateFormatVersion: 2010-09-09
Description: |
  Chatanoo Network

Parameters:
  DomainName:
    Type: String
  ProjectName:
    Type: String
  MultiAZ:
    Type: String
    AllowedValues: ["true", "false"]
    Default: false
  EC2KeyName:
    Type: AWS::EC2::KeyPair::KeyName
  NATInstanceType:
    Type: String
    Default: t2.nano
    AllowedValues:
      - gateway
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m4.large
      - m4.xlarge
      - m4.2xlarge

  SSHFrom:
    Type: String
    Description: Lockdown SSH access to the bastion host (default can be accessed from anywhere)
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x
  UseBastionHost:
    Type: String
    AllowedValues: ['true', 'false']
  CidrPrefix:
    Type: String
    Default: '10.0'

Mappings:

  BastionAMI:
    us-east-1:
      "64": 'ami-c481fad3'
    us-west-2:
      "64": 'ami-b04e92d0'
    eu-west-1:
      "64": 'ami-d41d58a7'
    ap-northeast-1:
      "64": 'ami-1a15c77b'

  AWSRegion2NATAMI:
    us-east-1:
      "64": 'ami-184dc970'
    us-west-2:
      "64": 'ami-030f4133'
    eu-west-1:
      "64": 'ami-14913f63'
    ap-southeast-1:
      "64": 'ami-03cf3903'

Conditions:
  UseBastionHostCondition: !Equals [!Ref UseBastionHost, "true"]
  UseMultiAZ: !Equals [!Ref MultiAZ, "true"]
  UseDNSRecord: !Not [!Equals [!Ref DomainName, ""]]
  UseDNSAndBastion: !And
    - !Condition UseDNSRecord
    - !Condition UseBastionHostCondition
  UseNATGateway: !Equals [!Ref NATInstanceType, "gateway"]
  DontUseNATGateway: !Not [!Equals [!Ref NATInstanceType, "gateway"]]

Resources:

  #######
  # DNS #
  #######

  PublicDNS:
    Type: AWS::Route53::HostedZone
    Condition: UseDNSRecord
    Properties:
      HostedZoneConfig:
        Comment: !Join ['', ['[Chatanoo] Public Hosted zone for ', !Ref ProjectName]]
      Name: !Ref DomainName
      HostedZoneTags:
        - Key: 'chatanoo:project'
          Value: !Ref ProjectName
        - Key: 'chatanoo:component'
          Value: 'network'

  BastionDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref PublicDNS
      Comment: !Join [' - ', [!Ref ProjectName, Public DNS Record for Bastion]]
      Name: !Join ['', [bastion, '.', !Ref DomainName, '.']]
      Type: A
      TTL: '300'
      ResourceRecords:
        - !Ref BastionIP
    Condition: UseDNSRecord

  #######
  # VPC #
  #######

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Sub "${CidrPrefix}.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "Chatanoo ${ProjectName}"
        - Key: 'chatanoo:project'
          Value: !Ref ProjectName
        - Key: 'chatanoo:component'
          Value: 'network'

  ##################
  # Public Network #
  ##################

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "Chatanoo Chatanoo InternetGateway (${ProjectName})"
        - Key: 'chatanoo:project'
          Value: !Ref ProjectName
        - Key: 'chatanoo:component'
          Value: 'network'

  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "Chatanoo PublicRouteTable (${ProjectName})"
        - Key: 'chatanoo:project'
          Value: !Ref ProjectName
        - Key: 'chatanoo:component'
          Value: 'network'

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Sub "${CidrPrefix}.0.0/27"
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select ['0', !GetAZs { Ref: "AWS::Region" }]
      Tags:
        - Key: Name
          Value: !Sub "Chatanoo PublicSubnet1 (${ProjectName})"
        - Key: chatanoo:project
          Value: !Ref ProjectName
        - Key: chatanoo:component
          Value: network

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Condition: UseMultiAZ
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Sub "${CidrPrefix}.0.32/27"
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select ['1', !GetAZs { Ref: "AWS::Region" }]
      Tags:
        - Key: Name
          Value: !Sub "Chatanoo PublicSubnet2 (${ProjectName})"
        - Key: chatanoo:project
          Value: !Ref ProjectName
        - Key: chatanoo:component
          Value: network

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: UseMultiAZ
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "Chatanoo PublicNetworkAcl (${ProjectName})"
        - Key: chatanoo:project
          Value: !Ref ProjectName
        - Key: chatanoo:component
          Value: network

  InboundSSHPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 102
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: !Ref SSHFrom
      PortRange:
        From: 22
        To: 22

  InboundHTTPPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 201
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80

  InboundHTTPSPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 202
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443

  InboundEmphemeralPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 301
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535

  OutboundPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535

  PublicSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref PublicNetworkAcl

  PublicSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Condition: UseMultiAZ
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !Ref PublicNetworkAcl

  ###################
  # Private Network #
  ###################
  NATIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !If
        - DontUseNATGateway
        - !Ref NATInstance
        - !Ref "AWS::NoValue"

  NAT:
    DependsOn: GatewayToInternet
    Type: AWS::EC2::NatGateway
    Condition: UseNATGateway
    Properties:
      AllocationId: !GetAtt NATIP2.AllocationId
      SubnetId: !Ref PublicSubnet1

  NATInstance:
    DependsOn: GatewayToInternet
    Type: AWS::EC2::Instance
    Condition: DontUseNATGateway
    Properties:
      ImageId: !FindInMap ["AWSRegion2NATAMI", !Ref "AWS::Region", "64"]
      InstanceType: !Ref NATInstanceType
      NetworkInterfaces:
        - GroupSet:
            - !Ref NATSecurityGroup
          AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          DeleteOnTermination: "true"
          SubnetId: !Ref PublicSubnet1
      KeyName: !Ref EC2KeyName
      SourceDestCheck: "false"
      Tags:
        - Key: Name
          Value: !Sub "NAT (${ProjectName})"
        - Key: 'chatanoo:project'
          Value: !Ref ProjectName
        - Key: 'chatanoo:component'
          Value: 'network'

  NATSecurityGroup:
    DependsOn: VPC
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "NAT Security Group"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Sub "${CidrPrefix}.0.0/16"
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Sub "${CidrPrefix}.0.0/16"
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref InstanceSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "NAT SecurityGroup (${ProjectName})"
        - Key: 'chatanoo:project'
          Value: !Ref ProjectName
        - Key: 'chatanoo:component'
          Value: 'network'

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "Chatanoo PrivateRouteTable (${ProjectName})"
        - Key: 'chatanoo:project'
          Value: !Ref ProjectName
        - Key: 'chatanoo:component'
          Value: 'network'

  PrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !If
        - UseNATGateway
        - !Ref NAT
        - !Ref "AWS::NoValue"
      InstanceId: !If
        - DontUseNATGateway
        - !Ref NATInstance
        - !Ref "AWS::NoValue"

  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "Chatanoo PrivateNetworkAcl (${ProjectName})"
        - Key: chatanoo:project
          Value: !Ref ProjectName
        - Key: chatanoo:component
          Value: network

  InboundSSHPrivateNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 102
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: !Sub "${CidrPrefix}.0.0/24" # PublicSubnet1 & PublicSubnet2
      PortRange:
        From: 22
        To: 22

  InboundPrivateNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535

  OutboundPrivateNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: All instances for SSH connection
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !Ref BastionSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "Chatanoo InstanceSecurityGroup (${ProjectName})"
        - Key: chatanoo:project
          Value: !Ref ProjectName
        - Key: chatanoo:component
          Value: network

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to the Bastion host
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHFrom
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Sub "${CidrPrefix}.0.0/16"
      Tags:
        - Key: Name
          Value: !Sub "Chatanoo BastionSecurityGroup (${ProjectName})"
        - Key: chatanoo:project
          Value: !Ref ProjectName
        - Key: chatanoo:component
          Value: network

  BastionIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  BastionHost:
    Type: AWS::EC2::Instance
    Condition: UseBastionHostCondition
    Properties:
      InstanceType: t2.nano
      KeyName: !Ref EC2KeyName
      SubnetId: !Ref PublicSubnet1
      ImageId: !FindInMap [BastionAMI, !Ref 'AWS::Region', '64']
      SecurityGroupIds:
        - !Ref BastionSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "Chatanoo Bastion (${ProjectName})"
        - Key: chatanoo:project
          Value: !Ref ProjectName
        - Key: chatanoo:component
          Value: network

  BastionIPAssoc:
    Type: AWS::EC2::EIPAssociation
    Condition: UseBastionHostCondition
    Properties:
      InstanceId: !Ref BastionHost
      AllocationId: !GetAtt BastionIP.AllocationId

Outputs:
  HostedZone:
    Description: Id of the Hosted Zone created
    Value: !Ref PublicDNS
    Condition: UseDNSRecord
  VPCId:
    Description: Id of the VPC created
    Value: !Ref VPC
  InstanceSecurityGroup:
    Value: !Ref InstanceSecurityGroup
  PrivateRouteTable:
    Value: !Ref PrivateRouteTable
  PublicRouteTable:
    Value: !Ref PublicRouteTable
  BastionDNS:
    Value: !If
      - UseDNSRecord
      - !Ref BastionDNSRecord
      - !Ref BastionIP
